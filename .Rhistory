summary.stats.2 <- tibble(beta.sample) |>
summarize(
sample.mean     = mean(beta.sample),
sample.var      = var(beta.sample),
sample.skew     = skewness(beta.sample),
sample.exc.kurt = kurtosis(beta.sample, type = 3)
)
##############################################################################################
#3rd case n=500
set.seed(7272) # Set seed so we all get the same results.
sample.size <- 500 # Specify sample details
alpha <- 5
beta <- 2
beta.sample <- rbeta(n = sample.size, # sample size
shape1 = alpha, # alpha parameter
shape2 = beta)
hist.den.3 <- ggplot(data.frame(x = beta.sample), aes(x = x)) +
geom_histogram(aes(y = after_stat(density)), bins = 25, fill = "lightblue", color = "black", alpha = 0.7) +
geom_density(aes(color = "Our Estimated Density Function"), size = 1) +
stat_function(fun = dbeta, args = list(shape1 = alpha, shape2 = beta),
aes(color = "Beta Distribution"), linetype = "dashed", size = 1) +
scale_color_manual(name = "Legend",
values = c("Our Estimated Density Function" = "red",
"Beta Distribution" = "blue")) +
theme_minimal() +
ggtitle("Histogram & Density Plot of Beta(5,2) Sample") +
xlab("x") + ylab("Density") +
theme(legend.position = "bottom")
summary.stats.3 <- tibble(beta.sample) |>
summarize(
sample.mean     = mean(beta.sample),
sample.var      = var(beta.sample),
sample.skew     = skewness(beta.sample),
sample.exc.kurt = kurtosis(beta.sample, type = 3)
)
##############################################################################################
#4th case n=500
set.seed(7272) # Set seed so we all get the same results.
sample.size <- 500 # Specify sample details
alpha <- .5
beta <- .5
beta.sample <- rbeta(n = sample.size, # sample size
shape1 = alpha, # alpha parameter
shape2 = beta)
hist.den.4 <- ggplot(data.frame(x = beta.sample), aes(x = x)) +
geom_histogram(aes(y = after_stat(density)), bins = 25, fill = "lightblue", color = "black", alpha = 0.7) +
geom_density(aes(color = "Our Estimated Density Function"), size = 1) +
stat_function(fun = dbeta, args = list(shape1 = alpha, shape2 = beta),
aes(color = "Beta Distribution"), linetype = "dashed", size = 1) +
scale_color_manual(name = "Legend",
values = c("Our Estimated Density Function" = "red",
"Beta Distribution" = "blue")) +
theme_minimal() +
ggtitle("Histogram & Density Plot of Beta(.5,.5) Sample") +
xlab("x") + ylab("Density") +
theme(legend.position = "bottom")
summary.stats.4 <- tibble(beta.sample) |>
summarize(
sample.mean     = mean(beta.sample),
sample.var      = var(beta.sample),
sample.skew     = skewness(beta.sample),
sample.exc.kurt = kurtosis(beta.sample, type = 3)
)
###########################################
#table for n=500 beta distributions
combined.summary.stats <- summary.stats.1 |>
merge(summary.stats.2, all=T)|>
merge(summary.stats.3, all=T)|>
merge(summary.stats.4, all=T)|>
mutate(Alpha = alpha.values, Beta = beta.values) |>
select(Alpha, Beta, sample.mean, sample.var, sample.skew, sample.exc.kurt)
##############################################################################################
##############################################################################################
#Task 3
##############################################################################################
##############################################################################################
library(cumstats)
set.seed(7272) # Set seed so we all get the same results.
sample.size <- 500 # Specify sample details
alpha <- 2
beta <- 5
beta.sample <- rbeta(n = sample.size, # sample size
shape1 = alpha, # alpha parameter
shape2 = beta)# beta parameter
cumulative.stats <- tibble(beta.sample)|>
mutate(
Mean = cummean(beta.sample),
Skewness = cumskew(beta.sample),
Variance = cumvar(beta.sample),
`Excess Kurtosis` = cumkurt(beta.sample) -3
)|>
mutate(n = row_number())
#################
#Mean
og.cum.mean.plot <- ggplot(cumulative.stats, aes(x = n, y = Mean)) +
geom_line(color = "blue") +
geom_hline(yintercept = pop.lvl.stats$Mean[1], linetype = "dashed", color = "red") +
labs(title = "Cumulative Mean", x = "Sample Size", y = "Mean")
#################
#Skewness
og.cum.skew.plot <- ggplot(cumulative.stats, aes(x = n, y = Skewness)) +
geom_line(color = "blue") +
geom_hline(yintercept = pop.lvl.stats$Skewness[1], linetype = "dashed", color = "red") +
labs(title = "Cumulative Skewness", x = "Sample Size", y = "Skewness")
#################
#Variance
og.cum.var.plot <- ggplot(cumulative.stats, aes(x = n, y = Variance)) +
geom_line(color = "blue") +
geom_hline(yintercept = pop.lvl.stats$Variance[1], linetype = "dashed", color = "red") +
labs(title = "Cumulative Variance", x = "Sample Size", y = "Variance")
#################
#Kurtosis
og.cum.kurt.plot <- ggplot(cumulative.stats, aes(x = n, y = `Excess Kurtosis`)) +
geom_line(color = "blue") +
geom_hline(yintercept = pop.lvl.stats$`Excess Kurtosis`[1], linetype = "dashed", color = "red") +
labs(title = "Cumulative Kurtosis", x = "Sample Size", y = "Kurtosis")
cum.plots <- (og.cum.mean.plot | og.cum.skew.plot)/
(og.cum.var.plot | og.cum.kurt.plot)
##############################################################################################
##############################################################################################
#Task 4
##############################################################################################
##############################################################################################
#Cum Stat simulation
all.simulated.cum.stats <- tibble()
for(i in 2:50){
set.seed(7272+i)
new.samples <- tibble(x = rbeta(n = 500, # sample size
shape1 = 2, # alpha parameter
shape2 = 5))# beta parameter
sim.cum.stats <- new.samples|>
mutate(
Mean = cummean(x),
Skewness = cumskew(x),
Variance = cumvar(x),
`Excess Kurtosis` = cumkurt(x) -3,
n = row_number(),
Simulation = i
)
all.simulated.cum.stats <- bind_rows(all.simulated.cum.stats, sim.cum.stats)
}
#################
#plotting our simulated samples
sim.og.cum.mean.plot <- og.cum.mean.plot +
geom_line(data = all.simulated.cum.stats,
aes(x = n , y = Mean, group = Simulation, color = as.factor(Simulation)), alpha = .5) +
theme(legend.position = "none")
sim.og.cum.var.plot <- og.cum.var.plot +
geom_line(data = all.simulated.cum.stats,
aes(x = n , y = Variance, group = Simulation, color = as.factor(Simulation)), alpha = .5) +
theme(legend.position = "none")
sim.og.cum.skew.plot <- og.cum.skew.plot +
geom_line(data = all.simulated.cum.stats,
aes(x = n , y = Skewness, group = Simulation, color = as.factor(Simulation)), alpha = .5) +
theme(legend.position = "none")
sim.og.cum.kurt.plot <- og.cum.kurt.plot +
geom_line(data = all.simulated.cum.stats,
aes(x = n , y = `Excess Kurtosis`, group = Simulation, color = as.factor(Simulation)), alpha = .5) +
theme(legend.position = "none")
combined.sim.og.plots <- (sim.og.cum.mean.plot | sim.og.cum.var.plot)/
(sim.og.cum.skew.plot | sim.og.cum.kurt.plot)
##############################################################################################
##############################################################################################
#Task 5
##############################################################################################
##############################################################################################
detach("package:cumstats", unload = T)
sampling.distribution.table <- tibble()
for(i in 1:1000){
set.seed(7272+i)
beta.data <- rbeta(n = 500, # sample size
shape1 = 2, # alpha parameter
shape2 = 5)# beta parameter
distribution.stats <- tibble(
Mean              = mean(beta.data),
Variance          = var(beta.data),
Skewness          = skewness(beta.data),
`Excess Kurtosis` = kurtosis(beta.data, type = 3),
Simulation = i
)
sampling.distribution.table <- bind_rows(sampling.distribution.table, distribution.stats)
}
#Mean Distribution
ggplot(sampling.distribution.table, aes(x = Mean)) +
geom_histogram(aes(y = after_stat(density)), bins = 30, fill = "blue", alpha = 0.6) +
geom_density(color = "red", linewidth = 1) +
labs(title = "Sampling Distribution of Sample Mean", x = "Sample Mean", y = "Density")
#Variance Distribution
ggplot(sampling.distribution.table, aes(x = Variance)) +
geom_histogram(aes(y = after_stat(density)), bins = 30, fill = "green", alpha = 0.6) +
geom_density(color = "red", linewidth = 1) +
labs(title = "Sampling Distribution of Sample Variance", x = "Sample Variance", y = "Density")
#Skewness Distribution
ggplot(sampling.distribution.table, aes(x = Skewness)) +
geom_histogram(aes(y = after_stat(density)), bins = 30, fill = "purple", alpha = 0.6) +
geom_density(color = "red", linewidth = 1) +
labs(title = "Sampling Distribution of Sample Skewness", x = "Sample Skewness", y = "Density")
#Kurtosis Distribution
ggplot(sampling.distribution.table, aes(x = `Excess Kurtosis`)) +
geom_histogram(aes(y = after_stat(density)), bins = 30, fill = "orange", alpha = 0.6) +
geom_density(color = "red", linewidth = 1) +
labs(title = "Sampling Distribution of Sample Kurtosis", x = "Sample Kurtosis", y = "Density")
cum.plots
combined.sim.og.plots
library(tidyverse)
library(ggplot2)
library(patchwork)
library(nleqslv)
################################################################################
################################################################################
#task 6
################################################################################
################################################################################
cntry.dth.rts <- read_csv("API_SP.DYN.CDRT.IN_DS2_en_csv_v2_76451.csv")
cntry.dth.rts <- cntry.dth.rts |>
select("Country Name", "Country Code", "2022")|>
mutate(`2022` = `2022` / 1000)
MOM.beta <- function(data, par){
alpha <- par[1]
beta  <- par[2]
EX  <- alpha / (alpha + beta)
EX2 <- ((alpha+1)*alpha)/((alpha+beta+1)*(alpha+beta))
m1 <- mean(data, na.rm = T)
m2 <- mean(data^2, na.rm = T)
return(c(EX-m1, EX2-m2))
}
nleqslv(x = c(20,20), # guess
fn = MOM.beta,
data=cntry.dth.rts$`2022`)
MLE.beta <- function(data, par, neg=FALSE){
alpha <- par[1]
beta  <- par[2]
loglik <- sum(log(dbeta(x=data, shape1 = alpha, shape2 = beta)), na.rm=T)
return(ifelse(neg, -loglik, loglik))
}
optim(par = c(2,2),
fn = MLE.beta,
data=cntry.dth.rts$`2022`,
neg=T)
################################################################################
################################################################################
#task 8
################################################################################
################################################################################
all.estimates <- tibble()
for(i in 1:1000){
set.seed(7272+i)
new.samples <- rbeta(n = 266, # sample size
shape1 = 8, # alpha parameter
shape2 = 950)# beta parameter
#MOM calculation
MOM.results <- nleqslv(x = c(8,950), # guess
fn = MOM.beta,
data= new.samples)
MOM.alpha <- MOM.results$x[1]
MOM.beta <- MOM.results$x[2]
#MLE calculation
MLE.results <- optim(par = c(8,950),
fn = MLE.beta,
data=new.samples,
neg=T)
MLE.beta <- MLE.results$par[1]
MLE.beta <- MLE.results$par[2]
all.estimates <- bind_rows(
all.estimates,
tibble(
Simulation = i,
MOM.alpha = MOM.alpha,
MOM.beta  = MOM.beta,
MLE.alpha = MLE.alpha,
MLE.beta  = MLE.beta
)
)
}
################################################################################
################################################################################
#task 8
################################################################################
################################################################################
all.estimates <- tibble()
for(i in 1:1000){
set.seed(7272+i)
new.samples <- rbeta(n = 266, # sample size
shape1 = 8, # alpha parameter
shape2 = 950)# beta parameter
#MOM calculation
MOM.results <- nleqslv(x = c(8,950), # guess
fn = MOM.beta,
data= new.samples)
MOM.alpha <- MOM.results$x[1]
MOM.beta <- MOM.results$x[2]
#MLE calculation
MLE.results <- optim(par = c(8,950),
fn = MLE.beta,
data=new.samples,
neg=T)
MLE.alpha <- MLE.results$par[1]
MLE.beta <- MLE.results$par[2]
all.estimates <- bind_rows(
all.estimates,
tibble(
Simulation = i,
MOM.alpha = MOM.alpha,
MOM.beta  = MOM.beta,
MLE.alpha = MLE.alpha,
MLE.beta  = MLE.beta
)
)
}
MOM.beta.fn <- function(data, par){
alpha <- par[1]
beta  <- par[2]
EX  <- alpha / (alpha + beta)
EX2 <- ((alpha+1)*alpha)/((alpha+beta+1)*(alpha+beta))
m1 <- mean(data, na.rm = T)
m2 <- mean(data^2, na.rm = T)
return(c(EX-m1, EX2-m2))
}
nleqslv(x = c(20,20), # guess
fn = MOM.beta,
data=cntry.dth.rts$`2022`)
MLE.beta.fn <- function(data, par, neg=FALSE){
alpha <- par[1]
beta  <- par[2]
loglik <- sum(log(dbeta(x=data, shape1 = alpha, shape2 = beta)), na.rm=T)
return(ifelse(neg, -loglik, loglik))
}
optim(par = c(2,2),
fn = MLE.beta,
data=cntry.dth.rts$`2022`,
neg=T)
MOM.beta.fn <- function(data, par){
alpha <- par[1]
beta  <- par[2]
EX  <- alpha / (alpha + beta)
EX2 <- ((alpha+1)*alpha)/((alpha+beta+1)*(alpha+beta))
m1 <- mean(data, na.rm = T)
m2 <- mean(data^2, na.rm = T)
return(c(EX-m1, EX2-m2))
}
nleqslv(x = c(20,20), # guess
fn = MOM.beta.fn,
data=cntry.dth.rts$`2022`)
MLE.beta.fn <- function(data, par, neg=FALSE){
alpha <- par[1]
beta  <- par[2]
loglik <- sum(log(dbeta(x=data, shape1 = alpha, shape2 = beta)), na.rm=T)
return(ifelse(neg, -loglik, loglik))
}
optim(par = c(2,2),
fn = MLE.beta.fn,
data=cntry.dth.rts$`2022`,
neg=T)
################################################################################
################################################################################
#task 8
################################################################################
################################################################################
all.estimates <- tibble()
for(i in 1:1000){
set.seed(7272+i)
new.samples <- rbeta(n = 266, # sample size
shape1 = 8, # alpha parameter
shape2 = 950)# beta parameter
#MOM calculation
MOM.results <- nleqslv(x = c(8,950), # guess
fn = MOM.beta.fn,
data= new.samples)
MOM.alpha <- MOM.results$x[1]
MOM.beta <- MOM.results$x[2]
#MLE calculation
MLE.results <- optim(par = c(8,950),
fn = MLE.beta.fn,
data=new.samples,
neg=T)
MLE.alpha <- MLE.results$par[1]
MLE.beta <- MLE.results$par[2]
all.estimates <- bind_rows(
all.estimates,
tibble(
Simulation = i,
MOM.alpha = MOM.alpha,
MOM.beta  = MOM.beta,
MLE.alpha = MLE.alpha,
MLE.beta  = MLE.beta
)
)
}
view(all.estimates)
dim(all.estimates)
all.estimates <- all.estimates |>
pivot_longer(cols = Simulation, names_to = "Estimator", values_to = "Value")
all.estimates
view(all.estimates)
################################################################################
################################################################################
#task 8
################################################################################
################################################################################
all.estimates <- tibble()
for(i in 1:1000){
set.seed(7272+i)
new.samples <- rbeta(n = 266, # sample size
shape1 = 8, # alpha parameter
shape2 = 950)# beta parameter
#MOM calculation
MOM.results <- nleqslv(x = c(8,950), # guess
fn = MOM.beta.fn,
data= new.samples)
MOM.alpha <- MOM.results$x[1]
MOM.beta <- MOM.results$x[2]
#MLE calculation
MLE.results <- optim(par = c(8,950),
fn = MLE.beta.fn,
data=new.samples,
neg=T)
MLE.alpha <- MLE.results$par[1]
MLE.beta <- MLE.results$par[2]
all.estimates <- bind_rows(
all.estimates,
tibble(
Simulation = i,
MOM.alpha = MOM.alpha,
MOM.beta  = MOM.beta,
MLE.alpha = MLE.alpha,
MLE.beta  = MLE.beta
)
)
}
view(all.estimates)
#convert data into long format with clearer categories
all.estimates.long <- all.estimates |>
pivot_longer(
cols = c(MOM.alpha, MOM.beta, MLE.alpha, MLE.beta),
names_to = c("Method", "Parameter"),
names_sep = "\\."
)
view(all.estimates.long)
#Plot 1: MOM Alpha Estimates
p1 <- ggplot(all.estimates.long |>
filter(Method == "MOM", Parameter == "alpha"),
aes(x = value)) +
geom_density(fill = "blue", alpha = 0.4) +
labs(title = "MOM α Estimates", x = "Estimated α", y = "Density") +
theme_minimal()
view(p1)
p1
estimator.plot <- (p1 + p2)/
(p3 + p4)
#Plot 1: MOM Alpha Estimates
p1 <- ggplot(all.estimates.long |>
filter(Method == "MOM", Parameter == "alpha"),
aes(x = value)) +
geom_density(fill = "blue", alpha = 0.4) +
labs(title = "MOM α Estimates", x = "Estimated α", y = "Density") +
theme_minimal()
#Plot 2: MOM Beta Estimates
p2 <- ggplot(all.estimates.long |>
filter(Method == "MOM", Parameter == "beta"),
aes(x = value)) +
geom_density(fill = "blue", alpha = 0.4) +
labs(title = "MOM β Estimates", x = "Estimated β", y = "Density") +
theme_minimal()
#Plot 3: MLE Alpha Estimates
p3 <- ggplot(all.estimates.long |>
filter(Method == "MLE", Parameter == "alpha"),
aes(x = value)) +
geom_density(fill = "blue", alpha = 0.4) +
labs(title = "MLE α Estimates", x = "Estimated α", y = "Density") +
theme_minimal()
#Plot 4: MLE Beta Estimates
p4 <- ggplot(all.estimates.long |>
filter(Method == "MLE", Parameter == "beta"),
aes(x = value)) +
geom_density(fill = "blue", alpha = 0.4) +
labs(title = "MLE β Estimates", x = "Estimated β", y = "Density") +
theme_minimal()
estimator.plot <- (p1 + p2)/
(p3 + p4)
estimator.plot
# True values of alpha and beta
true_alpha <- 8
true_beta  <- 950
# Compute Bias, Precision, and MSE for each estimator
summary_table <- tibble(
Method = c("MOM", "MOM", "MLE", "MLE"),
Parameter = c("Alpha", "Beta", "Alpha", "Beta"),
# Bias
Bias = c(
mean(all.estimates$MOM.alpha, na.rm = TRUE) - true_alpha,
mean(all.estimates$MOM.beta, na.rm = TRUE) - true_beta,
mean(all.estimates$MLE.alpha, na.rm = TRUE) - true_alpha,
mean(all.estimates$MLE.beta, na.rm = TRUE) - true_beta
),
# Precision (inverse of variance)
Precision = c(
1 / var(all.estimates$MOM.alpha, na.rm = TRUE),
1 / var(all.estimates$MOM.beta, na.rm = TRUE),
1 / var(all.estimates$MLE.alpha, na.rm = TRUE),
1 / var(all.estimates$MLE.beta, na.rm = TRUE)
),
# Mean Squared Error (MSE)
MSE = c(
var(all.estimates$MOM.alpha, na.rm = TRUE) + Bias[1]^2,
var(all.estimates$MOM.beta, na.rm = TRUE) + Bias[2]^2,
var(all.estimates$MLE.alpha, na.rm = TRUE) + Bias[3]^2,
var(all.estimates$MLE.beta, na.rm = TRUE) + Bias[4]^2
)
)
# Print the table
print(summary_table)
view(summary_table)
